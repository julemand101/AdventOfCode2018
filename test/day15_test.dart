// --- Day 15: Beverage Bandits ---
// https://adventofcode.com/2018/day/15

import 'package:test/test.dart';
import 'package:AdventOfCode2018/day15.dart';

const input = [
  '################################',
  '##########..........############',
  '########G..................#####',
  '#######..G.GG...............####',
  '#######....G.......#......######',
  '########.G.G...............#E..#',
  '#######G.................#.....#',
  '########.......................#',
  '########G.....G....#.....##....#',
  '########.....#....G.........####',
  '#########..........##....E.E#.##',
  '##########G..G..........#####.##',
  '##########....#####G....####E.##',
  '######....G..#######.....#.....#',
  '###....#....#########......#####',
  '####........#########..E...#####',
  '###.........#########......#####',
  '####G....G..#########......#####',
  '####..#.....#########....#######',
  '######.......#######...E.#######',
  '###.G.....E.G.#####.....########',
  '#.....G........E.......#########',
  '#......#..#..####....#.#########',
  '#...#.........###.#..###########',
  '##............###..#############',
  '######.....E####..##############',
  '######...........###############',
  '#######....E....################',
  '######...####...################',
  '######...###....################',
  '###.....###..##..###############',
  '################################'
];

void main() {
  group('Part One', () {
    test('Example 1', () {
      expect(
          solveA(const [
            '#######',
            '#.G...#',
            '#...EG#',
            '#.#.#G#',
            '#..G#E#',
            '#.....#',
            '#######'
          ]),
          equals(27730));
    });
    test('Example 2', () {
      expect(
          solveA(const [
            '#######',
            '#G..#E#',
            '#E#E.E#',
            '#G.##.#',
            '#...#E#',
            '#...E.#',
            '#######'
          ]),
          equals(36334));
    });
    test('Example 3', () {
      expect(
          solveA(const [
            '#######',
            '#E..EG#',
            '#.#G.E#',
            '#E.##E#',
            '#G..#.#',
            '#..E#.#',
            '#######'
          ]),
          equals(39514));
    });
    test('Example 4', () {
      expect(
          solveA(const [
            '#######',
            '#E.G#.#',
            '#.#G..#',
            '#G.#.G#',
            '#G..#.#',
            '#...E.#',
            '#######'
          ]),
          equals(27755));
    });
    test('Example 5', () {
      expect(
          solveA(const [
            '#######',
            '#.E...#',
            '#.#..G#',
            '#.###.#',
            '#E#G#G#',
            '#...#G#',
            '#######'
          ]),
          equals(28944));
    });
    test('Example 6', () {
      expect(
          solveA(const [
            '#########',
            '#G......#',
            '#.E.#...#',
            '#..##..G#',
            '#...##..#',
            '#...#...#',
            '#.G...G.#',
            '#.....G.#',
            '#########'
          ]),
          equals(18740));
    });
    test('Solution', () {
      expect(solveA(input), equals(257954));
    });
  });
  group('Part Two', () {
    test('Example 1', () {
      expect(
          solveB(const [
            '#######',
            '#.G...#',
            '#...EG#',
            '#.#.#G#',
            '#..G#E#',
            '#.....#',
            '#######'
          ]),
          equals(4988));
    });
    test('Example 2', () {
      expect(
          solveB(const [
            '#######',
            '#E..EG#',
            '#.#G.E#',
            '#E.##E#',
            '#G..#.#',
            '#..E#.#',
            '#######'
          ]),
          equals(31284));
    });
    test('Example 3', () {
      expect(
          solveB(const [
            '#######',
            '#E.G#.#',
            '#.#G..#',
            '#G.#.G#',
            '#G..#.#',
            '#...E.#',
            '#######'
          ]),
          equals(3478));
    });
    test('Example 4', () {
      expect(
          solveB(const [
            '#######',
            '#.E...#',
            '#.#..G#',
            '#.###.#',
            '#E#G#G#',
            '#...#G#',
            '#######'
          ]),
          equals(6474));
    });
    test('Example 5', () {
      expect(
          solveB(const [
            '#########',
            '#G......#',
            '#.E.#...#',
            '#..##..G#',
            '#...##..#',
            '#...#...#',
            '#.G...G.#',
            '#.....G.#',
            '#########'
          ]),
          equals(1140));
    });
    test('Solution', () {
      expect(solveB(input), equals(51041));
    });
  });
}
